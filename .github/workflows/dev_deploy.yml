name: Yourun Dev CI/CD

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Create application.yml  # application.yml 파일 생성 최적화
        run: |
          mkdir -p ./src/main/resources
          cat << EOF > ./src/main/resources/application.yml
          ${{ secrets.APPLICATION_YML }}
          EOF
        shell: bash

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon --parallel --build-cache

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: yourunServer
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: yourunServer
          path: build/libs/

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 최신 JAR 파일 찾기 (plain.jar 제외)
          JAR_FILE=$(ls -t build/libs/*.jar | grep -v plain | head -n 1)

          # 파일 전송 최적화 (rsync 사용)
          rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" "$JAR_FILE" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/yourunServer.jar

          # EC2에서 기존 프로세스 종료 후 재시작 (screen 활용)
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            pgrep -f 'java -jar' | xargs -r kill -9
            sleep 5
            screen -dmS yourunServer java -jar /home/$EC2_USERNAME/yourunServer.jar > /home/$EC2_USERNAME/app.log 2>&1
          EOF

          rm -f private_key.pem